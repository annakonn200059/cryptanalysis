from pycipher import SimpleSubstitution as SimpleSub
import random
import re
#from ngram_score import ngram_score
import sys
from math import log10
import time

class ngram_score(object):
    def __init__(self,ngramfile,sep=' '):
        self.ngrams = {}
        for line in open(ngramfile):
            key,count = line.split(sep) 
            self.ngrams[key] = int(count)
        self.L = len(key)
        self.N = sum(self.ngrams.values())
        #calculate log probabilities
        for key in self.ngrams.keys():
            self.ngrams[key] = log10(float(self.ngrams[key])/self.N)
        self.floor = log10(0.01/self.N)

    def score(self,text):
        ''' compute the score of text '''
        score = 0
        ngrams = self.ngrams.__getitem__
        for i in range(len(text)-self.L+1):
            if text[i:i+self.L] in self.ngrams: score += ngrams(text[i:i+self.L])
            else: score += self.floor          
        return score

fitness = ngram_score('D:/sarcrypto/public/js/english_quadgrams.txt')

ctext=sys.argv[1]
ctext=" ".join(ctext)
#ctext.replace(' ', '')
#ctext = re.sub('[^A-Z]','',ctext.upper())

maxkey = list('ABCDEFGHIJKLMNOPQRSTUVWXYZ')
maxscore = -99e9
parentscore,parentkey = maxscore,maxkey[:]
# keep going until we are killed by the user
listOfAns=[]
i = 0
deadline = time.monotonic() + 90
while time.monotonic() < deadline:
    i = i+1
    random.shuffle(parentkey)
    deciphered = SimpleSub(parentkey).decipher(ctext, True)
    parentscore = fitness.score(deciphered)
    count = 0
    while count < 1000:
        a = random.randint(0,25)
        b = random.randint(0,25)
        child = parentkey[:]
        # swap two characters in the child
        child[a],child[b] = child[b],child[a]
        deciphered = SimpleSub(child).decipher(ctext)
        score = fitness.score(deciphered)
        # if the child was better, replace the parent with it
        if score > parentscore:
            parentscore = score
            parentkey = child[:]
            count = 0
        count = count+1
    # keep track of best score seen so far
    if parentscore>maxscore:
        tmpArr = []
        maxscore,maxkey = parentscore,parentkey[:]
        #print ('\nbest score so far:',maxscore,'on iteration',i)
        ss = SimpleSub(maxkey)
        bestKey = ''.join(maxkey)
        plaintext = ss.decipher(ctext)
        tmpArr.append(bestKey)
        tmpArr.append(plaintext)
        #print ('    best key: '+''.join(maxkey))
        #print ('    plaintext: '+ss.decipher(ctext))
    listOfAns.append(tmpArr)
    time.sleep(1)
print("\n")
print("Key: " + listOfAns[len(listOfAns)-1][0])
print("\n")
print("Deciphered text: " + listOfAns[len(listOfAns)-1][1])
sys.stdout.flush()


